swagger: "2.0"
info:
  description: "This is documentation api for game store"
  version: "1.0.0"
  title: "Swagger Game Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000/api"
tags:
  - name: "users"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "http"
paths:
  /users:
    get:
      tags:
        - "users"
      summary: "Get all user"
      description: "Get all user "
      operationId: "getAllUser"
      responses:
        default:
          description: "successful operation"

  /users/register:
    post:
      tags:
        - "users"
      summary: "Register user"
      description: "Create user "
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        default:
          description: "successful operation"
  /users/login:
    post:
      tags:
        - "users"
      summary: "Log in user into the system"
      description: ""
      operationId: "loginUser"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"

      parameters:
        - name: "email"
          in: "formData"
          description: "The email for login"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"

  /users/{idUser}:
    get:
      tags:
        - "users"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "idUser that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /game:
    get:
      tags:
        - "game"
      summary: "Get all game"
      description: "Get all game "
      operationId: "getAllGame"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
        - "game"
      summary: "Create game"
      description: "Create game "
      operationId: "createGame"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created game object"
          required: true
          schema:
            $ref: "#/definitions/Game"
      responses:
        default:
          description: "successful operation"
  /game/{idGame}:
    get:
      tags:
        - "game"
      summary: "Get game by  id"
      description: ""
      operationId: "getGameById"
      produces:
        - "application/json"
      parameters:
        - name: "idGame"
          in: "path"
          description: "The Game that needs to be fetched. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Invalid Game supplied"
        "404":
          description: "Game not found"
    put:
      tags:
        - "game"
      summary: "Updated game"
      description: "Updated game"
      operationId: "updateGame"
      produces:
        - "application/json"
      parameters:
        - name: "idGame"
          in: "path"
          description: "idGame that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated game object"
          required: true
          schema:
            $ref: "#/definitions/Game"
      responses:
        "400":
          description: "Invalid game supplied"
        "404":
          description: "game not found"
  /bill:
    get:
      tags:
        - "bill"
      summary: "Get all bill"
      description: "Get all bill "
      operationId: "getAllBill"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
        - "bill"
      summary: "Create bill"
      description: "Create bill "
      operationId: "createBill"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created Bill object"
          required: true
          schema:
            $ref: "#/definitions/Bill"
      responses:
        default:
          description: "successful operation"
  /bill/{idBill}:
    get:
      tags:
        - "bill"
      summary: "Get bill by  id"
      description: ""
      operationId: "getBillById"
      produces:
        - "application/json"
      parameters:
        - name: "idBill"
          in: "path"
          description: "The Bill that needs to be fetched. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bill"
        "400":
          description: "Invalid Bill supplied"
        "404":
          description: "Bill not found"
    put:
      tags:
        - "bill"
      summary: "Updated bill"
      description: "Updated bill"
      operationId: "updateBill"
      produces:
        - "application/json"
      parameters:
        - name: "idBill"
          in: "path"
          description: "idBill that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated bill object"
          required: true
          schema:
            $ref: "#/definitions/Bill"
      responses:
        "400":
          description: "Invalid bill supplied"
        "404":
          description: "bill not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Users:
    type: "object"
    properties:
      userName:
        type: "string"
      password:
        type: "string"
      realName:
        type: "string"
      email:
        type: "string"
      numberPhone:
        type: "string"
      avatar:
        type: "string"
      background:
        type: "string"
    xml:
      name: "User"
  Game:
    type: "object"
    properties:
      idDiscount:
        type: "string"
      nameGame:
        type: "string"
      averageRate:
        type: "number"
      numOfRate:
        type: "number"
      developer:
        type: "string"
      publisher:
        type: "string"
      releaseDate:
        type: "string"
    xml:
      name: "Game"
  Bill:
    type: "object"
    properties:
      idBill:
        type: "string"
      idGame:
        type: "string"
      idUser:
        type: "string"
      datePay:
        type: "string"
      cost:
        type: "number"
      actions:
        type: "string"
      discount:
        type: "string"
    xml:
      name: "Bill"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
